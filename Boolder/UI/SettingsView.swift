//
//  SettingsView.swift
//  Boolder
//
//  Created by Nicolas Mondollot on 10/01/2021.
//  Copyright Â© 2021 Nicolas Mondollot. All rights reserved.
//

import SwiftUI
import CoreData
import TipKit

struct SettingsView: View {
    @Environment(\.managedObjectContext) var managedObjectContext
    
    @State private var showAlertToRemoveTicksAndFavorites = false
    @State private var showNewTopoView = false
    
    var body: some View {
        Form {
            Section(header: Text("Topo Creation")) {
                Button(action: {
                    showNewTopoView = true
                }) {
                    Text("Show NewTopoView")
                }.sheet(isPresented: $showNewTopoView) {
                    NewTopoView(topoEntry: TopoEntry())
                }
            }
            
            Section(header: Text("Ticks and favorites")) {
                HStack {
                    Button(action: {
                        showAlertToRemoveTicksAndFavorites = true
                    }) {
                        Text("Remove all ticks and favorites").foregroundColor(.red)
                    }
                    .alert(isPresented: $showAlertToRemoveTicksAndFavorites) {
                        Alert(
                            title: Text("Are you sure?"),
                            message: Text("This will delete all favorites and ticks"),
                            primaryButton: .destructive(Text("Delete")) {
                                deleteFavoritesAndTicks()
                            },
                            secondaryButton: .cancel()
                        )
                    }
                }
                
                HStack {
                    Button(action: {
                        createFavorites()
                    }) {
                        Text("Create favorites")
                    }
                }
                
                HStack {
                    Button(action: {
                        createTicks()
                    }) {
                        Text("Create ticks")
                    }
                }
            }
            
            Section(header: Text("Downloads")) {
                HStack {
                    Button(action: {
                        DownloadCenter.shared.forceReset()
                        print("force reset")
                    }) {
                        Text("Remove photo downloads").foregroundColor(.red)
                    }
                }
            }
            
            Section(header: Text("Tips")) {
                HStack {
                    Button(action: {
                        if #available(iOS 17.0, *) {
                            try? Tips.resetDatastore()
                            try? Tips.configure()
                        }
                    }) {
                        Text("Reset Tips datastore").foregroundColor(.red)
                    }
                }
                
                HStack {
                    Button(action: {
                        if #available(iOS 17.0, *) {
                            Tips.showAllTipsForTesting()
                        }
                    }) {
                        Text("Show all tips")
                    }
                }
                
                HStack {
                    Button(action: {
                        if #available(iOS 17.0, *) {
                            Tips.hideAllTipsForTesting()
                        }
                    }) {
                        Text("Hide all tips")
                    }
                }
            }
        }
        .navigationBarTitle(Text("Settings"), displayMode: .inline)
    }
    
    private func createFavorites() {
        let ids = [8073, 12460, 237, 273, 916, 5374, 8071, 5608, 654, 719, 126, 594, 721, 6690, 122, 145, 12425, 12222, 12455, 12457, 1088, 2528, 278, 1210, 1221, 1583, 2186, 12205, 12213, 1496, 2197, 12177, 725, 1248, 918, 891, 1011, 885, 915, 917, 1582, 4554, 1387, 12230, 1437, 12226, 1455, 1547, 1606, 1622, 12233, 1185, 285, 288, 302, 702, 720, 722, 1237, 693, 4542, 12229, 729, 3447, 274, 12162, 12163, 1712, 838, 1462, 488, 1435, 12148, 258, 5206, 5233, 5214, 3825, 11952, 11955, 11957, 2743, 813, 937, 10171, 505, 506, 11967, 4535, 4538, 6115, 10195, 4499, 4539, 4550, 4573, 4502, 1741, 4814, 11321, 913, 3801, 13343, 4882, 11776, 13468, 3798, 3841, 4095, 13363, 13342, 3985, 4093, 13364, 11350, 3840, 3887, 4820, 4856, 10187, 13353, 13478, 10166, 3875, 10170, 13359, 2668, 3082, 3083, 13484, 10502, 10648, 880, 881, 1758, 13362, 13533, 4534, 6089, 10158, 12304, 9962, 3186, 3200, 3160, 3161, 3325, 2893, 1740, 2892, 2902, 2984, 3331, 1595, 2242, 2281, 2912, 2889, 3426, 3876, 3294, 9907, 9896, 691, 2214, 4082, 6103, 3319, 3377, 3403, 3225, 3287, 3424, 3227, 3245, 3283, 3409, 3275, 3324, 5135, 5716, 3806, 690, 5449, 10179, 727, 9888, 9950, 9981, 10007, 6555, 1713, 9951, 10161, 3671, 3711, 5442, 5451, 5469, 5444, 5446, 5452, 7738, 4674, 6669, 3672, 3487, 4811, 2624, 4254, 5379, 2282, 2377, 2308, 2352, 2359, 2370, 2371, 2280, 6084, 2294, 2358, 4787, 5203, 4277, 1665, 4789, 2630, 2555, 2558, 2839, 2582, 2591, 2609, 2556, 2497, 4815, 4792, 4812, 4888, 4730, 4756, 4898, 4727, 4741, 4755, 7752, 6064, 5091, 5100, 2279, 2357, 6692, 7764, 6075, 6093, 6156, 12880, 12882, 12883, 6088, 4910, 6054, 6158, 5095, 5116, 5137, 6107, 6304, 4911, 5008, 5088, 5090, 5106, 5144, 2911, 2952, 2972, 2993, 3066, 4916, 5115, 5145, 6102, 8624, 5152, 5197, 5205, 5230, 6098, 4533, 4537, 4555, 4557, 4581, 10981, 2608, 2641, 2857, 7776, 6008, 6689, 11956, 6713, 7796, 7820, 11985, 3355, 7813, 7849, 7867, 10112, 10188, 5930, 3764, 6730, 7896, 245, 4880, 116, 5741, 7905, 6806, 7881, 634, 6717, 6800, 6805, 7882, 7911, 221, 230, 243, 6665, 6712, 6778, 6837, 112, 224, 7682, 7680, 6337, 6344, 6360, 11429, 297, 298, 101, 914, 1113, 6279, 6319, 6365, 6380, 8074, 11425, 5953, 7080, 5796, 5929, 5986, 5998, 7069, 5904, 5928, 5963, 6006, 5921, 5948, 5954, 5978, 6278, 6338, 6352, 232, 6266, 1281, 11210, 7543, 10941, 10995, 10955, 14184, 1588, 11760, 10233, 1636, 1703, 1733, 1739, 1839, 7542, 12156, 1925, 10050, 11742, 11758, 11763, 11800, 10047, 1982, 13674, 11736, 5392, 2060, 2076, 5349, 5373, 147, 2288, 2366, 8175, 2542, 2607, 7865, 7871, 8321, 8267, 8284, 11972, 2884, 2888, 8211, 8161, 8165, 11982, 3086, 3157, 3354, 3470, 8980, 3644, 8953, 8954, 13738, 10042, 10045, 10068, 11284, 8508, 10044, 11003, 1679, 8971, 8973, 8997, 9013, 1738, 8974, 9014, 9043, 9045, 1737, 3802, 3803, 10999, 10175, 3877, 3878, 3917, 10975, 10977, 11966, 10979, 11190, 4117, 10193, 10162, 13579, 4556, 4651, 13765, 13611, 14883, 1913, 1914, 9141, 9272, 7807, 7814, 7850, 9177, 13759, 9117, 9315, 6009, 6013, 7910, 8445, 10873, 10874, 10878, 10882, 4230, 10869, 8609, 4241, 10870, 10871, 10908, 4247, 7010, 7046, 7088, 7160, 4257, 7043, 12167, 4261, 4269, 6853, 7177, 4521, 4551, 4670, 4793, 4802, 4813, 4905, 8478, 8503, 8515, 1992, 2000, 9074, 2003, 2021, 9077, 2046, 9056, 8479, 8501, 8506, 8514, 8531, 8516, 8522, 6992, 7163, 7045, 7068, 7071, 5089, 5127, 9910, 9953, 5382, 5325, 5541, 5733, 7005, 7062, 7089, 2065, 2068, 2079, 2087, 2090, 4101, 4205, 5867, 4284, 4291, 4298, 4278, 4297, 6055, 6065, 6090, 4221, 13199, 7889, 12453, 12423, 6207, 6339, 6340, 6482, 10408, 10425, 10359, 10409, 10411, 10413, 10415, 10419, 10435, 10448, 10414, 10416, 10436, 10437, 10087, 10407, 6543, 7051, 7158, 6560, 6586, 1831, 1861, 1902, 13613, 13673, 13676, 13739, 6691, 6705, 6711, 6739, 6804, 1835, 13203, 6835, 1779, 1795, 1834, 13196, 1784, 1816, 1856, 7155, 13176, 1780, 13586, 13671, 7480, 7403, 13416, 13284, 1841, 1836, 7493, 8398, 8484, 7597, 8060, 8065, 8121, 8132, 7612, 7981, 8131, 7945, 8057, 7631, 7982, 8067, 8125, 8139, 13469, 13491, 7678, 7799, 8957, 8192, 8205, 8256, 8373, 8323, 8325, 8361, 8379, 8268, 8371, 8372, 8160, 8183, 6452, 7625, 7800, 7946, 7596, 7461, 7492, 7555, 7411, 7436, 7495, 7499, 7307, 7351, 7487, 7991, 7998, 8738, 9429, 8803, 9417, 9859, 9831, 9414, 9623, 9857, 9425, 9428, 9862, 9688, 9883, 9426, 9828, 9847, 8663, 8683, 8791, 8107, 9168, 9191, 9237, 9252, 9142, 9185, 9314, 9317, 9340, 9358, 9331, 9370, 8402, 8505, 8644, 8673, 8681, 8795, 8664, 8680, 8787, 13351, 8623, 8634, 8642, 8665, 11457, 11524, 8799, 8800, 8801, 11559, 11700, 9055, 9139, 11701, 11707, 13074, 9262, 9318, 9410, 9416, 9569, 11474, 6460, 12997, 6481, 6434, 6451, 6462, 6545, 6432, 6433, 6438, 6538, 6540, 6588, 6492, 6503, 5597, 5728, 5732, 5568, 13701, 9897, 10043, 5524, 13746, 12620, 11732, 5516, 5575, 5596, 5697, 5594, 5735, 10174, 11856, 11769, 11765, 11737, 11772, 12622, 11780, 5652, 5674, 3452, 3585, 3618, 3645, 3712, 5547, 5558, 3457, 3684, 3692, 3752, 3703, 10510, 14748, 11571, 1786, 14708, 14772, 14781, 10978, 14777, 14706, 14709, 14721, 14747, 14794, 3647, 8126, 13672, 13704, 13711, 6654, 13175, 13179, 13217, 13174, 13277, 10758, 11192, 13165, 13178, 13188, 14124, 6628, 14344, 11322, 14343, 14482, 11041, 11481, 11482, 11485, 11538, 11465, 11542, 11703, 11453, 11521, 11547, 11637, 11539, 11688, 6632, 14141, 14199, 14559, 6641, 11454, 11522, 11525, 11706, 11755, 11756, 11779, 11790, 12019, 12021, 12022, 12027, 12158, 12215, 13879, 14274, 14224, 14186, 14299, 14558, 12474, 12523, 11298, 13352, 11272, 13323, 13375, 13386, 13523, 13612, 13675, 13768, 13863, 11311, 13940, 14223, 14179, 11019, 14682, 14190, 15145, 15146, 15134, 15198, 15200, 15207, 11186, 14183, 11151, 11159, 12506, 11188, 11203, 10482, 10582, 10503, 10514, 13815, 13861, 13855, 13864, 14033, 13808, 13853, 13789, 13860, 14035, 13786, 13806, 13857, 13865, 13901, 13903, 14036, 10600, 10652, 10755, 10477, 10650, 10528, 10479, 10513, 10516, 10647, 10651, 10682, 14135, 14225, 14275, 8878, 8880, 13031, 13042, 13071, 13011, 15211, 15197, 15201, 15137, 15182, 15161, 15142, 15157, 15177, 15144, 15133, 15141, 15195, 15212, 15250, 15243, 15262, 15362, 15259, 4243, 4246, 12692, 12627, 12629, 12625, 12668, 12621, 12667, 15363, 15469, 15480, 15269, 15402, 15366, 15379, 15253, 15254, 15377, 15378, 15252, 15290, 15453, 15261, 5259, 5254, 5401]
        
        ids.forEach { id in
            let favorite = Favorite(context: managedObjectContext)
            favorite.id = UUID()
            favorite.problemId = Int64(id)
            favorite.createdAt = Date()
            
            do {
                try managedObjectContext.save()
            } catch {
                // handle the Core Data error
            }
        }
        
        print("done")
        
    }
    
    private func createTicks() {
        let ids = [8073, 12460, 237, 273, 916, 5374, 8071, 5608, 654, 719, 126, 594, 721, 6690, 122, 145, 12425, 12222, 12455, 12457, 1088, 2528, 278, 1210, 1221, 1583, 2186, 12205, 12213, 1496, 2197, 12177, 725, 1248, 918, 891, 1011, 885, 915, 917, 1582, 4554, 1387, 12230, 1437, 12226, 1455, 1547, 1606, 1622, 12233, 1185, 285, 288, 302, 702, 720, 722, 1237, 693, 4542, 12229, 729, 3447, 274, 12162, 12163, 1712, 838, 1462, 488, 1435, 12148, 258, 5206, 5233, 5214, 3825, 11952, 11955, 11957, 2743, 813, 937, 10171, 505, 506, 11967, 4535, 4538, 6115, 10195, 4499, 4539, 4550, 4573, 4502, 1741, 4814, 11321]
        
        ids.forEach { id in
            let tick = Tick(context: managedObjectContext)
            tick.id = UUID()
            tick.problemId = Int64(id)
            tick.createdAt = Date()
            
            do {
                try managedObjectContext.save()
            } catch {
                // handle the Core Data error
            }
        }
        
        print("done")
        
    }
    
    // BE VERY CAREFUL WHEN CHANGING THIS PIECE OF CODE, IT MAY DELETE DATA IN PRODUCTION
    private func deleteFavoritesAndTicks() {
        #if DEVELOPMENT
        
        // delete all favorites
        let ReqVar = NSFetchRequest<NSFetchRequestResult>(entityName: "Favorite")
        let DelAllReqVar = NSBatchDeleteRequest(fetchRequest: ReqVar)
        do { try managedObjectContext.execute(DelAllReqVar) }
        catch { print(error) }

        // delete all ticks
        let ReqVar2 = NSFetchRequest<NSFetchRequestResult>(entityName: "Tick")
        let DelAllReqVar2 = NSBatchDeleteRequest(fetchRequest: ReqVar2)
        do { try managedObjectContext.execute(DelAllReqVar2) }
        catch { print(error) }
        
        #endif
    }
}

struct SettingsView_Previews: PreviewProvider {
    static var previews: some View {
        SettingsView()
    }
}
